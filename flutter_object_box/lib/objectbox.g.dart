// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5619064148317518856),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(10, 7480557793518904478),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5734078672568872506),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 998932825072819963),
            name: 'firstLat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2085641102946887601),
            name: 'firstLong',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6398853731999017562),
            name: 'secondLat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6939686121595671432),
            name: 'secondLong',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3567028199864521342),
            name: 'firstlocAddress',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2115432844174364957),
            name: 'secondlocAddress',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7480557793518904478),
            name: 'distance',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 5619064148317518856),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [7687588596944487077, 6210826219360964029],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    User: obx_int.EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final firstlocAddressOffset = fbb.writeString(object.firstlocAddress);
          final secondlocAddressOffset =
              fbb.writeString(object.secondlocAddress);
          final distanceOffset = fbb.writeString(object.distance);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(3, object.firstLat);
          fbb.addFloat64(4, object.firstLong);
          fbb.addFloat64(5, object.secondLat);
          fbb.addFloat64(6, object.secondLong);
          fbb.addOffset(7, firstlocAddressOffset);
          fbb.addOffset(8, secondlocAddressOffset);
          fbb.addOffset(9, distanceOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final firstLatParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final firstLongParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final secondLatParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final secondLongParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final firstlocAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final secondlocAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final distanceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = User(
              id: idParam,
              firstLat: firstLatParam,
              firstLong: firstLongParam,
              secondLat: secondLatParam,
              secondLong: secondLongParam,
              firstlocAddress: firstlocAddressParam,
              secondlocAddress: secondlocAddressParam,
              distance: distanceParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = obx.QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.firstLat]
  static final firstLat =
      obx.QueryDoubleProperty<User>(_entities[0].properties[1]);

  /// see [User.firstLong]
  static final firstLong =
      obx.QueryDoubleProperty<User>(_entities[0].properties[2]);

  /// see [User.secondLat]
  static final secondLat =
      obx.QueryDoubleProperty<User>(_entities[0].properties[3]);

  /// see [User.secondLong]
  static final secondLong =
      obx.QueryDoubleProperty<User>(_entities[0].properties[4]);

  /// see [User.firstlocAddress]
  static final firstlocAddress =
      obx.QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.secondlocAddress]
  static final secondlocAddress =
      obx.QueryStringProperty<User>(_entities[0].properties[6]);

  /// see [User.distance]
  static final distance =
      obx.QueryStringProperty<User>(_entities[0].properties[7]);
}
